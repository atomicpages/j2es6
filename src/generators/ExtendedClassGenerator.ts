import {ClassDefinition} from "../typings/ClassDefinition";

/**
 * Generator for creating extended classes.
 * @class
 */
export class ExtendedClassGenerator {

	/**
	 * Builds the AST which supports the ES6 extends keyword.
	 * @param ast {ClassDefinition} The AST generated by the ProgramGenerator and ClassGenerator.
	 * @param extendedNamespace {string[]} The extended class' namespace.
	 */
	static build(ast: ClassDefinition, extendedNamespace: string[]): void {
		ast.expression.right.superClass = {
			type: "MemberExpression"
		};

		ExtendedClassGenerator._buildExtends(ast.expression.right.superClass, extendedNamespace.slice())
	}

	/**
	 * Recursively creates the superClass object for the AST.
	 * Note: this method operates on the AST directly.
	 * @param superClass {object} The super class' object in the AST.
	 * @param namespaces {string[]} The extending class' namespace.
	 * @private
	 */
	private static _buildExtends(superClass: any, namespaces: string[]): void {
		if (namespaces.length === 0) return;

		superClass.object = superClass.object || {
				type: "MemberExpression",
				computed: false
			};

		if (namespaces.length === 2) {
			delete superClass.object.computed;

			superClass.object.type = "Identifier";
			superClass.object.name = namespaces.shift();
		}

		superClass.property = superClass.property || {
				type: "Identifier",
				name: namespaces.pop()
			};

		ExtendedClassGenerator._buildExtends(superClass.object, namespaces);
	}

}
